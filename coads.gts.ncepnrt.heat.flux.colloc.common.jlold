#=
 = Report triple collocation stats following McColl et al. (2014)
 = using previously identified collocated values - RD September 2015
 =#

using My
const MISS             = -9999.0                        # generic missing value

if size(ARGS) != (1,)
  write("\nUsage: jj $(basename(@__FILE__)) all.flux.common.shf\n\n")
  exit(1)
end

dirs = ["cfsr", "erainterim", "hoaps", "ifremerflux", "j-ofuro", "merra", "oaflux", "seaflux", "insitu"]

fila = "$(ARGS[1])"
fpa = My.ouvre(fila, "r")
lines = readlines(fpa)
close(fpa)

(num,) = size(lines)                                                          # read all well defined collocations
flux = Array(Float64, num, 9)
for (a, line) in enumerate(lines)
  vals = float(split(line))
  flux[a,:] = [vals[4] vals[5] vals[6] vals[7] vals[8] vals[9] vals[10] vals[11] vals[12]]
end
write("found $num collocations in $fila\n")

allsig = Array(Float64, 8, 8)                                                 # use in situ and (a) any one analysis
allcor = Array(Float64, 8, 8)                                                 # in turn as references and store the
for a = 1:8                                                                   # third (b) error and correlation values
  for b = 1:8
    sampbuoy = flux[:,9]
    sampsate = flux[:,a]
    sampfore = flux[:,b]

    avg1 = mean(sampbuoy)
    avg2 = mean(sampsate)
    avg3 = mean(sampfore)
    cv11 = mean(sampbuoy.*sampbuoy) - avg1^2
    cv12 = mean(sampbuoy.*sampsate) - avg1 * avg2
    cv13 = mean(sampbuoy.*sampfore) - avg1 * avg3
    cv22 = mean(sampsate.*sampsate) - avg2^2
    cv23 = mean(sampsate.*sampfore) - avg2 * avg3
    cv33 = mean(sampfore.*sampfore) - avg3^2

    bet2 = cv23 / cv13
    bet3 = cv23 / cv12
    alp2 = avg2 - bet2 * avg1
    alp3 = avg3 - bet3 * avg1
    tmpval = cv11 - cv12 * cv13 / cv23 ; sig1 = tmpval > 0 ? sqrt(tmpval) : 0.0
    tmpval = cv22 - cv12 * cv23 / cv13 ; sig2 = tmpval > 0 ? sqrt(tmpval) : 0.0
    tmpval = cv33 - cv13 * cv23 / cv12 ; sig3 = tmpval > 0 ? sqrt(tmpval) : 0.0
    tmpval = cv12 * cv13 / cv11 / cv23 ; cor1 = tmpval > 0 ? sqrt(tmpval) : 0.0
    tmpval = cv12 * cv23 / cv22 / cv13 ; cor2 = tmpval > 0 ? sqrt(tmpval) : 0.0
    tmpval = cv13 * cv23 / cv33 / cv12 ; cor3 = tmpval > 0 ? sqrt(tmpval) : 0.0

    allsig[a,b] = sig3
    allcor[a,b] = cor3
  end
end

write("allsig\n")
for b = 1:8                                                                   # then output the average error
  tmp = 0.0
  for a = 1:8
    if a != b  tmp += allsig[a,b]  end
  end
  tmp /= 7.0
  @printf("%22s %15.5f\n", dirs[b], tmp)
end

write("allcor\n")
for b = 1:8                                                                   # then output the average error
  tmp = 0.0
  for a = 1:8
    if a != b  tmp += allcor[a,b]  end
  end
  tmp /= 7.0
  @printf("%22s %15.5f\n", dirs[b], tmp)
end

#=
filb = "$(ARGS[1]).triple.shf"
fpa = My.ouvre(filb, "w")                                                     # and save the stats
  write(fpa, "bet2 $bet2\n")
  write(fpa, "bet3 $bet3\n")
  write(fpa, "alp2 $alp2\n")
  write(fpa, "alp3 $alp3\n")
  write(fpa, "sig1 $sig1\n")
  write(fpa, "sig2 $sig2\n")
  write(fpa, "sig3 $sig3\n")
  write(fpa, "cor1 $cor1\n")
  write(fpa, "cor2 $cor2\n")
  write(fpa, "cor3 $cor3\n")
  close(fpa)
end

  sig1 = sqrt(cv11 - cv12 * cv13 / cv23)
  sig2 = sqrt(cv22 - cv12 * cv23 / cv13)
  sig3 = sqrt(cv33 - cv13 * cv23 / cv12)
  cor1 = sqrt(cv12 * cv13 / cv11 / cv23)
  cor2 = sqrt(cv12 * cv23 / cv22 / cv13)
  cor3 = sqrt(cv13 * cv23 / cv33 / cv12)

tmp = "avg1" ; println("$tmp = ",eval(parse(tmp)))
tmp = "avg2" ; println("$tmp = ",eval(parse(tmp)))
tmp = "avg3" ; println("$tmp = ",eval(parse(tmp)))
tmp = "cv11" ; println("$tmp = ",eval(parse(tmp)))
tmp = "cv12" ; println("$tmp = ",eval(parse(tmp)))
tmp = "cv13" ; println("$tmp = ",eval(parse(tmp)))
tmp = "cv22" ; println("$tmp = ",eval(parse(tmp)))
tmp = "cv23" ; println("$tmp = ",eval(parse(tmp)))
tmp = "cv33" ; println("$tmp = ",eval(parse(tmp)))

tmp = "bet2" ; println("$tmp = ",eval(parse(tmp)))
tmp = "bet3" ; println("$tmp = ",eval(parse(tmp)))
tmp = "alp2" ; println("$tmp = ",eval(parse(tmp)))
tmp = "alp3" ; println("$tmp = ",eval(parse(tmp)))

tmp = "mean(bet2)" ; println("$tmp = ",eval(parse(tmp)))
tmp = "mean(bet3)" ; println("$tmp = ",eval(parse(tmp)))
tmp = "mean(alp2)" ; println("$tmp = ",eval(parse(tmp)))
tmp = "mean(alp3)" ; println("$tmp = ",eval(parse(tmp)))
tmp = "mean(sig1)" ; println("$tmp = ",eval(parse(tmp)))
tmp = "mean(sig2)" ; println("$tmp = ",eval(parse(tmp)))
tmp = "mean(sig3)" ; println("$tmp = ",eval(parse(tmp)))
tmp = "mean(cor1)" ; println("$tmp = ",eval(parse(tmp)))
tmp = "mean(cor2)" ; println("$tmp = ",eval(parse(tmp)))
tmp = "mean(cor3)" ; println("$tmp = ",eval(parse(tmp)))
=#
