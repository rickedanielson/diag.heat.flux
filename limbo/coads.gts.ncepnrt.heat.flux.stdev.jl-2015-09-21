#=
 = Identify all sets of collocated values among in situ and two
 = analyses at the resolution of the common grid - RD June 2015
 =#

using My

const MISS             = -9999.0                        # generic missing value

if size(ARGS) == (0,) || size(ARGS) == (1,)
  write("\nUsage: jj $(basename(@__FILE__)) all.flux cfsr erainterim\n\n")
  exit(1)
elseif size(ARGS) == (2,)
  (dseta, dsetb) = split(ARGS[2])
elseif size(ARGS) == (3,)
  dseta = ARGS[2]
  dsetb = ARGS[3]
end

write("reading $(ARGS[1])\n")
lats =  [-90.0:0.25:89.75]                                                    # define the grid and read the in situ
lons = [-180.0:0.25:179.75]
obs = readcsv(ARGS[1])
num, = size(obs)
write("found $num collocations $(size(obs))\n")

count = 0
shfobs = Array(Float64, 0)
shfana = Array(Float64, 0)
shfanb = Array(Float64, 0)

write("reading $dseta and $dsetb\n")
for a = 1:num
  if 199910010000 < obs[a,4] < 201001010000 && -333 < obs[a,1] < 3333
    dat = @sprintf("%.0f", obs[a,4])
    lat = obs[a,5]
    lon = obs[a,6] ; lon < -180 && (lon += 360)
    dellat, indlat = findmin(abs(lats - lat))
    dellon, indlon = findmin(abs(lons - lon))
    tmp = @sprintf("%9.3f.%9.3f", lats[indlat], lons[indlon])
    tmq = replace(tmp, " ", ".")
    tma = "$dseta/$dseta.$tmq"
    tmb = "$dsetb/$dsetb.$tmq"
    if isfile(tma) && isfile(tmb)
      tmpana = tmpanb = MISS
      fpa = My.ouvre(tma, "r", false)
      lines = readlines(fpa)
      for line in lines
        vals = split(line) ; tmp = vals[1]
        if tmp[1:8] == dat[1:8]
          tmpana = float(vals[2])
        end
      end
      close(fpa)
      fpa = My.ouvre(tmb, "r", false)
      lines = readlines(fpa)
      for line in lines
        vals = split(line) ; tmp = vals[1]
        if tmp[1:8] == dat[1:8]
          tmpanb = float(vals[2])
        end
      end
      close(fpa)

      if -333 < tmpana < 3333 && -333 < tmpanb < 3333
        count += 1
        push!(shfobs, obs[a,1])
        push!(shfana, tmpana)
        push!(shfanb, tmpanb) 
      end
    end
  end
end
write("found $count collocations $(size(shfobs))\n")

outfile = "$(ARGS[1]).$dseta.$dsetb"
fpo = My.ouvre(outfile, "w")
for a = 1:count
  write(fpo, "$(shfobs[a]) $(shfana[a]) $(shfanb[a])\n")
end
close(fpo)
exit(0)

sampbuoy = shfobs
sampsate = shfana
sampfore = shfanb

  avg1 = mean(sampbuoy)
  avg2 = mean(sampsate)
  avg3 = mean(sampfore)
  cv11 = mean(sampbuoy.*sampbuoy) - avg1^2
  cv12 = mean(sampbuoy.*sampsate) - avg1 * avg2
  cv13 = mean(sampbuoy.*sampfore) - avg1 * avg3
  cv22 = mean(sampsate.*sampsate) - avg2^2
  cv23 = mean(sampsate.*sampfore) - avg2 * avg3
  cv33 = mean(sampfore.*sampfore) - avg3^2

  bet2 = cv23 / cv13
  bet3 = cv23 / cv12
  alp2 = avg2 - bet2 * avg1
  alp3 = avg3 - bet3 * avg1
  sig1 = sqrt(cv11 - cv12 * cv13 / cv23)
  sig2 = sqrt(cv22 - cv12 * cv23 / cv13)
  sig3 = sqrt(cv33 - cv13 * cv23 / cv12)
  cor1 = sqrt(cv12 * cv13 / cv11 / cv23)
  cor2 = sqrt(cv12 * cv23 / cv22 / cv13)
  cor3 = sqrt(cv13 * cv23 / cv33 / cv12)

#=
tmp = "mean(bet2)" ; println("$tmp = ",eval(parse(tmp)))
tmp = "mean(bet3)" ; println("$tmp = ",eval(parse(tmp)))
tmp = "mean(alp2)" ; println("$tmp = ",eval(parse(tmp)))
tmp = "mean(alp3)" ; println("$tmp = ",eval(parse(tmp)))
tmp = "mean(sig1)" ; println("$tmp = ",eval(parse(tmp)))
tmp = "mean(sig2)" ; println("$tmp = ",eval(parse(tmp)))
tmp = "mean(sig3)" ; println("$tmp = ",eval(parse(tmp)))
tmp = "mean(cor1)" ; println("$tmp = ",eval(parse(tmp)))
tmp = "mean(cor2)" ; println("$tmp = ",eval(parse(tmp)))
tmp = "mean(cor3)" ; println("$tmp = ",eval(parse(tmp)))
=#

outfile = "$(ARGS[1]).$dseta.$dsetb"
fpa = My.ouvre(outfile, "w")                                      # and save it
  write(fpa, "bet2 $bet2\n")
  write(fpa, "bet3 $bet3\n")
  write(fpa, "alp2 $alp2\n")
  write(fpa, "alp3 $alp3\n")
  write(fpa, "sig1 $sig1\n")
  write(fpa, "sig2 $sig2\n")
  write(fpa, "sig3 $sig3\n")
  write(fpa, "cor1 $cor1\n")
  write(fpa, "cor2 $cor2\n")
  write(fpa, "cor3 $cor3\n")
close(fpa)
