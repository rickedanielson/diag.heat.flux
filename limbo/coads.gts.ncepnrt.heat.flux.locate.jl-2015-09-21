#=
 = Identify a set of locations covering all observations in a file,
 = but where locations are only defined at the resolution of a grid
 = (for subsequent collocation) - RD June 2015
 =#

using My

if size(ARGS) == (0,)
  write("\nUsage: jj $(basename(@__FILE__)) all.flux\n\n")
  exit(1)
end

lats =  [-90.0:0.25:89.75]                                                    # define the grid and initialize
lons = [-180.0:0.25:179.75]                                                   # the collocations
subs = Set{(Float64, Float64)}()

csv = readcsv(ARGS[1])                                                        # find the set of collocations
vals, = size(csv)
for a = 1:vals
  lat = csv[a,5]
  lon = csv[a,6] ; lon < -180 && (lon += 360)
  dellat, indlat = findmin(abs(lats - lat))
  dellon, indlon = findmin(abs(lons - lon))
# @printf("%f,%f became %f,%f\n", lat, lon, lats[indlat], lons[indlon])
  push!(subs, (lats[indlat], lons[indlon]))
end

fpa = My.ouvre("$(ARGS[1]).locate", "w")                                      # and save it
for loc in subs
  (lat, lon) = loc
  line = @sprintf("%8.2f, %8.2f\n", lat, lon)
  write(fpa, line)
end
close(fpa)
